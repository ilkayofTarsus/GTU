.data
    sizeX: .asciiz "X ekseni boyutunu girin: "
    sizeY: .asciiz "Y ekseni boyutunu girin: "
    bombaInputIste: .asciiz "Bombalý haritayý tek satýrda girin:\n"
    totalSize: .space 10	# total sizeýn kaydedileceði buffer
    newline: .asciiz "\n"	#newline bufferý
    input_buffer:   .space  64  #tek satýrda alýnacak harita bufferý
    char_bomba: .asciiz "B"	#!!!!!!!!!!!!!!!!!!!!!!! Bombanýn temsil edildiði char !!!!!!!!!!!!!!!!!!
    loopIste: .asciiz "Döngü sayýsýný girin\n"

.text
	.globl main
	
    main:
        # Kullanýcýdan X ekseni boyutunu al
        li $v0, 4          # print_str için syscall numarasý
        la $a0, sizeX      # prompt'u ekrana yazdýr
        syscall
	li $v0, 5           # read_int için syscall numarasý
        syscall
        move $s0, $v0		# s0 = x_boyut
	
	# Kullanýcýdan X ekseni boyutunu al
	li $v0, 4	#prompt yazdýrma kodu
	la $a0, sizeY 	#prompt kaydedildi
	syscall 	#syscall
        li $v0, 5	# read_int için syscall numarasý
        syscall		#syscall
        move $s1, $v0	# s1 = y_boyut

	# Toplam eleman sayýsýný hesapla (rows * columns)
        mul $s3, $s0, $s1	#s3 =  totalSize
        
	jal create_matrix	#  bu iki fonksiyon beraber c kodumdaki
	jal generateMap		#  generateMap fonksiyonunu implement ediyor. harita oluþturup * basýyor	
	jal takeInput
	jal create_sayac_matrix	#  bu iki fonksiyon beraber c kodumdaki
	jal generateSayacMap	#  generateSayacMap fonksiyonunu implement ediyor. sayac haritasý oluþturup 9 kaydediyor
	jal bombaSayac
	
	li $v0, 4		# prompt yazdýrma kodu
	la $a0, loopIste 	# kaçýncý döngüdeki harita isteniyor bulmak için input alma 		
	syscall			#syscall
	li $v0, 5		# integer okuma kodu
        syscall			#syscall
        move $a3, $v0		# döngü sayýsý a3 e kaydedildi
	
	add $a2, $zero, $zero
	mainLoop:beq  $a2, $a3, end_mainLoop
		jal sayacSay		# bombalarýn sayacýný azaltacak olan subroutin
		jal printStarMap	# haritanýn mevcut durumunu bastýran subroutin
		jal plantBombs		# bomba olmayan yerlere bomba koyan subroutin
		jal bombaSayac		# yeni koyulan bombalarýn sayacýný baþlatan subroutin
		addi $a2, $a2, 1 # döngü sayýsý arttýrýldý
		j mainLoop
	end_mainLoop:		# Çýkýþ yap
        li $v0, 10      	# exit için syscall numarasý
        syscall

printStarMap:
        # Yýldýz haritasýný bastýran fonksiyon
        # Argüman: $t0 = kullanýcýnýn girdiði sayý (boyut)
	move $t3, $s2		# char mapi t3 pointerýna kaydedildi
        li $t1, 0           # Döngü deðiþkeni: satýr sayýsý
    outer_loop: 
        bge $t1, $s1, outer_done   # Satýr sayýsý boyunca döngü
        li $t2, 0           # Döngü deðiþkeni: sütun sayýsý
    inner_loop:
        bge $t2, $s0, inner_done   # Sütun sayýsý boyunca döngü
        li $v0, 11          # print_char için syscall numarasý
        lb $t4, 0($t3)         # '*' karakterini yazdýr
        move $a0, $t4		# karakter yazdýrmak için a0 registerý kullanýldý
        syscall			#syscall
        addi $t2, $t2, 1    # Sütun sayýsýný artýr
        addi $t3, $t3, 1    # pointer kaydýrýldý
        j inner_loop
    inner_done:
        li $v0, 4           # print_str için syscall numarasý
        la $a0, newline     # Yeni satýra geç
        syscall		    #syscall
        addi $t1, $t1, 1    # Satýr sayýsýný artýr
        j outer_loop
    outer_done:
    	li $v0, 4           # print_str için syscall numarasý
        la $a0, newline     # Yeni satýra geç
        syscall		    #syscall
        li $v0, 4           # print_str için syscall numarasý
        la $a0, newline     # Yeni satýra geç
        syscall		    #syscall
        jr $ra

printSayacMap:
        # Yýldýz haritasýný bastýran fonksiyon
        # Argüman: $t0 = kullanýcýnýn girdiði sayý (boyut)
	move $t3, $s4	    # sayac mapi adresi kaydedildi
        li $t1, 0           # Döngü deðiþkeni: satýr sayýsý
    outer_loop22:
        bge $t1, $s1, outer_done22   # Satýr sayýsý boyunca döngü
        li $t2, 0           # Döngü deðiþkeni: sütun sayýsý
    inner_loop22:
        bge $t2, $s0, inner_done22   # Sütun sayýsý boyunca döngü
        li $v0, 1          # print_int için syscall numarasý
        lw $t4, 0($t3)         # '*' karakterini yazdýr
        move $a0, $t4	    # t4 içeriði yazdýrýlacak
        syscall		    #syscall
        addi $t2, $t2, 1    # Sütun sayýsýný artýr
        addi $t3, $t3, 4    # integer mapindeki pointer kaydýrma
        j inner_loop22	
    inner_done22:
        li $v0, 4           # print_str için syscall numarasý
        la $a0, newline     # Yeni satýra geç
        syscall	            #syscall
        addi $t1, $t1, 1    # Satýr sayýsýný artýr
        j outer_loop22
    outer_done22:
        jr $ra


create_matrix:

    	# Hafýzada gerekli alaný ayrýla
    	li $v0, 9             # sbrk syscall (heap'ten bellek ayýrma)
    	move $a0, $s3         # $a0 register'ýna toplam eleman sayýsýný yükle
    	syscall
    	move $s2, $v0         # $s2 register'ýna ayrýlan bellek adresini kopyala
    
    	jr $ra               # Fonksiyondan dön
    
generateMap:
	move $t3, $s2		# char mapi t3 pointerýna atandý
        li $t1, 0           # Döngü deðiþkeni: satýr sayýsý
    outer_loop1:
        bge $t1, $s1, outer_done1   # Satýr sayýsý boyunca döngü
        li $t2, 0           # Döngü deðiþkeni: sütun sayýsý
    inner_loop1:
        bge $t2, $s0, inner_done1  # Sütun sayýsý boyunca döngü
        li $t4, '*'	# * charý haritaya kaydedilmek üzere t4 e atandý
        sb $t4, ($t3)        # atama yapýldý
        addi $t2, $t2, 1    # Sütun sayýsýný artýr
        addi $t3, $t3, 1    # pointer kaydýrýldý
        j inner_loop1
    inner_done1:
        addi $t1, $t1, 1    # Satýr sayýsýný artýr
        j outer_loop1
    outer_done1:
        jr $ra

create_sayac_matrix:
	move $t0, $s0         # $t0 register'ýna satýr sayýsýný kopyala
	move $t1, $s1         # $t1 register'ýna sütun sayýsýný kopyala
	li $t3, 4		# integer mapý oluþturmak için gereken alan
	mul $t2, $s3, $t3	# gereken alan hesaplandý
    	# Hafýzada gerekli alaný ayrýla
    	li $v0, 9             # sbrk syscall (heap'ten bellek ayýrma)
    	move $a0, $t2         # $a0 register'ýna toplam eleman sayýsýný yükle
    	syscall			#syscall
    	move $s4, $v0         # $s4 register'ýna ayrýlan bellek adresini kopyala
    
    	jr $ra               # Fonksiyondan dön
generateSayacMap:
	move $t3, $s4
        li $t1, 0           # Döngü deðiþkeni: satýr sayýsý
    outer_loop11:
        bge $t1, $s1, outer_done11   # Satýr sayýsý boyunca döngü
        li $t2, 0           # Döngü deðiþkeni: sütun sayýsý
    inner_loop11:
        bge $t2, $s0, inner_done11  # Sütun sayýsý boyunca döngü
        addi $t4, $zero, 9
        sb $t4, ($t3)        
        addi $t2, $t2, 1    # Sütun sayýsýný artýr
        addi $t3, $t3, 4
        j inner_loop11
    inner_done11:
        addi $t1, $t1, 1    # Satýr sayýsýný artýr
        j outer_loop11
    outer_done11:
        jr $ra
 


takeInput:
	li $v0, 4           # print_str için syscall numarasý
        la $a0, bombaInputIste      # prompt'u ekrana yazdýr
        syscall
	
	li $v0, 8                # 8 numaralý syscall: String oku
	la $a0, input_buffer     # Giriþ buffer'ýnýn adresini $a0'e yükle
	li $a1, 64               # Maksimum karakter sayýsýný $a1'e yükle
	syscall
	
	la $t1, ($s3)		# t1 pointerýna toplam eleman sayýsý atandý
	la $t4, input_buffer	#input_buffer etiketindekinin adresi kaydedildi
	la $t3, ($s2)		# t3 pointerýna char mapinin adresi atandý
	add $t0, $zero, $zero
	inner_loop2:
		beq $t1, $t0, inner_done2
		lb $t5, 0($t4)		# input_bufferdaki charý t5 e kaydediyoy
		sb $t5,0($t3)		# input_bufferdan aldýðý charý arraydeki mevcut indexe atýyor
				
		addi $t4, $t4, 1	# bufferda gezinen pointer
		addi $t3, $t3, 1	# haritada gezinen pointer 
		addi $t0, $t0, 1	# döngü sayýsý
		j inner_loop2
	inner_done2:
		jr $ra
    
bombaSayac:
	move $t0, $s2 # haritayý t0 a attý
	move $t1, $s4 # sayac haritasýný t1 a attý
	add $t3, $zero, $zero # dongu için sayac atandý
	li $t4, 9
	la $t5, char_bomba	# "B" charýnýn adresi t5 e atandý
	lb $t6, 0($t5)		# "B" vharý t6 ya atandý
	li $t7, 3		# kontrol edebilmek amacýyla 3 deðeri t7 ye atandý
	loop1:	beq $t3, $s3, end_loop1	
		lb $t2, 0($t0)		#harita pointerý vasýtasýyla mevcut deðer t2 ye atandý
		bne $t2, $t6, case1	#if(map[a][b] == 'B' && sayacMap[a][b] == 9){
		lw $t2, 0($t1)		# sayac mapi pointerý vasýtasýyla mevcut sayý t2 ye kaydedildi
		bne $t2, $t4, case1	# iki eþitlik kontrolü sayesinde üstteki if kontrolü saðlandý
		sw $t7, ($t1) 		# Ýki tane bne'den geçtiyse char haritasýndaki mevcut index B ye eþit ve ayný zamanda sayac haritasýndaki indexteki deðer ise 9 a eþit
		case1:
		addi $t0, $t0, 1	#sayac kontrol için arttýrýldý
		addi $t1, $t1, 4	#integer mapinde bir sonraki adrese eriþim için adres arttýrýldý
		addi $t3, $t3, 1	#char mapinde bir sonraki adrese eriþim
		j loop1
	end_loop1: jr $ra	
		
			
sayacSay:
	add $t0, $zero, $zero # sayac
	li $t1, 9
	move $t2, $s2 # haritayý t2 a attý
	move $t3, $s4 # sayac haritasýný t3 a attý
	sayacLoop: beq $t0, $s3, endSayacLoop # eleman sayýsýna eþitse bitir
		lw $t4, 0($t3)	# t4 sayac haritasýndaki indexteki mevcut sayý
		beq  $t4, $t1, sayacCase1	# sayac haritasýndaki 9 olan tum registerlar esgeçildi
		subi $t4, $t4, 1	#sayacMap[a][b] = sayacMap[a][b] -1 ; // bombalarýn sayacý eksiltiliyor
		sw $t4, 0($t3)		# guncellenen sayac haritaya eklendý
		bnez  $t4, sayacCase1 	# bomba sayacý 0 olduysa patlatma fonksyýonuna yonlendirildi
		j patlat
		sayacCase1:
			addi $t3, $t3, 4	# int arrayi sonraki elemana geçti
			addi $t2, $t2, 1	# char arrayi sonraki elemana geçti
			addi $t0, $t0, 1	# sayac arttýrýldý
		j sayacLoop
	endSayacLoop:
		jr $ra
patlat:

	li $t6, '*'	# patlatýlan yerler sýfýrlanýyor
        sb $t6, ($t2)	 # char haritasýndaki mevcut char * yapýldý yani reset atýldý
		
	li $t6, 9	# patlatýlan yerler sýfýrlanýyor
	sw $t6, 0($t3) # sayac haritasýndaki mevcut deðer 9 yapýldý yani reset atýldý	

			#üstteki satýrlar
			#map[y][x] = '*';
			#sayacMap[y][x] = 9;

	move $t5, $t0												
	div $t5, $s0 	# mevcut indexi x ekseninin boyutuna bölüp mod alýyor
	mfhi $t7	# moda göre bir önceki alaný patlatýp patlatmamaya karar verecek
	subi $t8, $s0, 1# satýr sonu indeksini tutuyor
	
	#if(x > 0){
	#	map[y][x-1] = '*';
	#	sayacMap[y][x-1] = 9;
	#}
	beqz $t7, patlatCase1	# t7 == 0 burdan devam etme (t7 bir sonraki moda kadar x ekseninde kaçýncý index onu tutuyor)
	subi $t2, $t2, 1	
	li $t6, '*'		#t6 = *
	sb $t6, ($t2)	 	# char haritasýndaki mevcut char * yapýldý yani reset atýldý
	addi $t2, $t2, 1	# t2 indeksi tekrar eski yerine getirildi
	
	subi $t3, $t3, 4	# pointer bir önceki adrese kaydý	
	li $t6, 9		# 9 atýlarak * olduðu belli edildi
	sw $t6, 0($t3)	 	# sayac haritasýndaki mevcut deðer 9 yapýldý yani reset atýldý
	addi $t3, $t3, 4	# t3 indeksi tekrar eski yerine getirildi
	
	patlatCase1:
	#if(x < sizeX-1){
	#	if(sayacMap[y][x+1] != 1){
	#		map[y][x+1] = '*';
	#		sayacMap[y][x+1] = 9;
	#	}
	#}
	
	beq $t7, $t8, patlatCase2# t7 == t8 burdan devam etme (t8 son index)

	addi $t3, $t3, 4	 	# pointer bir sonraki adrese kaydýrýldý
	lw $t6, 0($t3)			# t6 = *t3
	li $t9, 1			# t9 = 1
	beq $t6, $t9, bombaKontrol	#bombaKontrol etiketi sayesinde o tur patlayacak baþka bombayý engelleme iþi çözülüyor
	li $t6, 9		# 9 atýlarak * olduðu belli edildi
	sw $t6, 0($t3)	 	# sayac haritasýndaki mevcut deðer 9 yapýldý yani reset atýldý
	

	addi $t2, $t2, 1	# pointer bir sonraki adrese kaydýrýldý
	li $t6, '*'		#t6 = '*'
	sb $t6, ($t2)	 	# char haritasýndaki mevcut char * yapýldý yani reset atýldý
	subi $t2, $t2, 1	# t2 indeksi tekrar eski yerine getirildi
	

	
	bombaKontrol:
	subi $t3, $t3, 4	# t3 indeksi tekrar eski yerine getirildi
	patlatCase2:
	add $t7, $zero, $zero	# y eksenindeki kontroller için t7 sýfýrlandý
	move $t5, $t0		# t5 tekrardan t0 a atandý.Garanti olsun diye
	div $t7, $t5, $s0 	# x ekseninin boyutuna bölüp sonucu kaydediyor t7 = t5/s0
				# sonuca göre yukatý indexi patlatýp patlatmamaya karar verecek
	subi $t8, $s1, 1# sütun sonu indeksini tutuyor
	
	
	#if(y > 0){
	#	map[y-1][x] = '*';
	#	sayacMap[y-1][x] = 9;
	#}
	beqz $t7, patlatCase3	# t7 == 0 burdan devam  etme (t7 y ekseninde kaçýncý index onu tutuyor)
	mul $t9, $s0, 4		# 2 boyutlu düþündülünce bir alt adrese eriþmek için x ekseni kadar sonraya gitmek için t9 atandý
	sub $t3, $t3, $t9	# y+1 deki indexe eriþim
	li $t6, 9		# 9 atýlarak * olduðu belli edildi
	sw $t6, 0($t3)	 	# sayac haritasýndaki mevcut deðer 9 yapýldý yani reset atýldý
	add $t3, $t3, $t9	# pointer eski yerine getirildi
	
	sub $t2, $t2, $s0	# 2 boyutlu düþündülünce bir alt adrese eriþmek için x ekseni kadar sonraya gitmek için t9 atandý
	li $t6, '*'
	sb $t6, ($t2)	 	# char haritasýndaki mevcut char * yapýldý yani reset atýldý
	add $t2, $t2, $s0	# pointer eski yerine getirildi

	patlatCase3:
	
	#if(y < sizeY-1){
	#	if(sayacMap[y+1][x] != 1){
	#		map[y+1][x] = '*';
	#		sayacMap[y+1][x] = 9;
	#	}
	#}
	beq $t7, $t8, patlatCase4# t7 == t8 burdan devam etme(t8 son index)
	mul $t9, $s0, 4		 # t9 a x ekseninin boyutunun 4 katý atandý. tek boyutlu haritayý 2 boyutlu düþünebilmek için
	add $t3, $t3, $t9	 # pointer bir aþaðý adrese kaydýrýldý
	
	lw $t6, 0($t3)			#bir alttaki bomba bu tur patlayacaksa onu ellememesi için bir kontrol
	li $s7, 1			# sonraki bomba bu tur patlayacak mý		
	beq $t6, $s7, bombaKontrol2	#patlayacak olan bombadan gelen sonra bu tur patlayacak olan bomba varsa esgeçildi
	li $t6, 9		# 9 atýlarak * olduðu belli edildi
	sw $t6, 0($t3)	 	# sayac haritasýndaki mevcut deðer 9 yapýldý yani reset atýldý
	add $t2, $t2, $s0	# pointer y+1 indexteki elemana eriþmek için x ekseni boyutu kadar ilerledi
	li $t6, '*'		# char'ý mape kaydedebilmek için t6 registerýna "*" kaydedildi
	sb $t6, ($t2)	 	# char haritasýndaki mevcut char * yapýldý yani reset atýldý
	sub $t2, $t2, $s0	# pointer eski yerine getirildi
	bombaKontrol2:
	sub $t3, $t3, $t9	# pointer eski yerine getirildi	
	patlatCase4:
		j sayacCase1

plantBombs:

	li $t0, 0	# sayac
	li $t2, 'B'	#Bomba charý
	move $t3, $s2	#char arrayi t3 e kopyalandý
	move $t4, $s4	#sayac arrayi t4 e kopyalandý
	plantBombOuterLoop: beq $t0, $s1,plantBombOuterLoopDone	#for(int a=0; a < y; a++){
		li $t1, 0					# ýnner loop sayacý
		plantBombInnerLoop: beq $t1, $s0 ,plantBombInnerLoopDone #for(int b=0; b < x; b++){
			lw $t5, 0($t4)			# sayac haritasý pointerý ile mevcut sayý t5 e kaydedildi
			lb $t6, ($t3)			#if(map[a][b] != 'B') map[a][b] = 'B';
			beq $t2, $t6, plantCase 	#Mevcut indexte "B" içermeyen
			sb $t2, ($t3)			# her char "B" yapýlýyor
			plantCase:		
			addi $t1, $t1, 1		#inner loop sayacý artýrýldý
			addi $t3, $t3, 1		#pointer adresi arttýrýldý
			addi $t4, $t4, 4		#integer pointerý arttýrýldý
			j plantBombInnerLoop
		plantBombInnerLoopDone:
		add $t0, $t0, 1				# dýþ loop sayacý arttýrýldý
		j plantBombOuterLoop
	plantBombOuterLoopDone:
		jr $ra
